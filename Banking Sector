1. Retrieve All Transactions for a Specific Customer
SELECT transaction_id, customer_id, transaction_date, amount, transaction_type
FROM transactions
WHERE customer_id = 'C001'
ORDER BY transaction_date DESC;

2. Calculate the Total Balance for All Accounts
SELECT SUM(balance) AS total_balance
FROM accounts;

3. Find Customers with a Loan Amount Greater Than $50,000
SELECT customer_id, loan_id, loan_amount, loan_date
FROM loans
WHERE loan_amount > 50000;

4. Identify Duplicate Accounts
SELECT account_number, COUNT(*)
FROM accounts
GROUP BY account_number
HAVING COUNT(*) > 1;

5. Find All Transactions That Occurred in the Last 30 Days
SELECT transaction_id, customer_id, amount, transaction_date
FROM transactions
WHERE transaction_date >= DATEADD(DAY, -30, GETDATE());

6. Calculate the Average Loan Amount by Loan Type
SELECT loan_type, AVG(loan_amount) AS avg_loan_amount
FROM loans
GROUP BY loan_type;

7. Find the Top 5 Customers with the Highest Account Balances
SELECT customer_id, account_number, balance
FROM accounts
ORDER BY balance DESC
LIMIT 5;

8. Retrieve the Loan Repayment History for a Customer
SELECT repayment_id, loan_id, customer_id, payment_date, payment_amount
FROM repayments
WHERE customer_id = 'C001'
ORDER BY payment_date DESC;

9. Calculate the Total Number of Accounts by Account Type
SELECT account_type, COUNT(*) AS total_accounts
FROM accounts
GROUP BY account_type;

10. Detect Suspicious Transactions
SELECT transaction_id, customer_id, amount, transaction_date
FROM transactions
WHERE amount > 10000 AND transaction_type = 'Withdrawal';

11. Find Accounts That Are Overdrawn
SELECT account_number, customer_id, balance
FROM accounts
WHERE balance < 0;

12. Identify Customers with Multiple Loans
SELECT customer_id, COUNT(*) AS loan_count
FROM loans
GROUP BY customer_id
HAVING COUNT(*) > 1;

13. Calculate the Total Interest Earned from All Loans
SELECT SUM(loan_amount * interest_rate / 100) AS total_interest_earned
FROM loans;

14. Retrieve All Customers Who Have Never Taken a Loan
SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN loans l ON c.customer_id = l.customer_id
WHERE l.loan_id IS NULL;

15.  Calculate the Average Time to Deliver a Credit Card
SELECT AVG(DATEDIFF(day, application_date, delivery_date)) AS avg_delivery_time
FROM credit_cards;

16. Retrieve the Top 3 Most Popular Products for Loans
SELECT loan_type, COUNT(*) AS total_loans
FROM loans
GROUP BY loan_type
ORDER BY total_loans DESC
LIMIT 3;

17. Calculate Monthly Total Transactions
SELECT YEAR(transaction_date) AS year, MONTH(transaction_date) AS month, SUM(amount) AS total_transactions
FROM transactions
GROUP BY YEAR(transaction_date), MONTH(transaction_date)
ORDER BY year, month;

18.  Identify Inactive Customers
SELECT customer_id, name
FROM customers
WHERE customer_id NOT IN (
    SELECT DISTINCT customer_id
    FROM transactions
    WHERE transaction_date >= DATEADD(YEAR, -1, GETDATE())
);

19.  Check Loan-to-Value (LTV) Ratio for Home Loans
SELECT loan_id, property_value, loan_amount, 
       (loan_amount / property_value) * 100 AS ltv_ratio
FROM loans
WHERE loan_type = 'Home Loan';

20.  Generate a Report of All Pending Loans
SELECT loan_id, customer_id, loan_amount, loan_status
FROM loans
WHERE loan_status = 'Approved' AND disbursed_date IS NULL;



